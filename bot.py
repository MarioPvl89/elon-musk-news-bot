import os
import logging
import asyncio
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ (–∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
TOKEN = os.getenv("TELEGRAM_TOKEN")
API_KEY = os.getenv("NEWS_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://elon-musk-news-bot.onrender.com")

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å Render)
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ –ò–ª–æ–Ω–∞ –ú–∞—Å–∫–∞
def get_news():
    url = f"https://newsapi.org/v2/everything?q=Elon+Musk&language=en&sortBy=publishedAt&apiKey={API_KEY}"
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        articles = data.get("articles", [])
        news_list = [f"üîπ {a['title']}\n{a['url']}" for a in articles[:5]]
        return "\n\n".join(news_list) if news_list else "üî∏ –°–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç."
    else:
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π."

# üîπ –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /news
async def news_command(update: Update, context: CallbackContext) -> None:
    news = get_news()
    await update.message.reply_text(news)

# üîπ –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ –ò–ª–æ–Ω–∞ –ú–∞—Å–∫–∞.\n\n–ù–∞–ø–∏—à–∏ /news, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏.")

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
app = Application.builder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("news", news_command))

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
async def set_webhook():
    webhook_url = f"{WEBHOOK_URL}/{TOKEN}/"
    await app.bot.set_webhook(webhook_url)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ, –∏ –Ω–∞ Render)
async def main():
    await set_webhook()
    await app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8443)),
        webhook_url=f"{WEBHOOK_URL}/{TOKEN}/"
    )

# üîπ –ó–∞–ø—É—Å–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–µ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
